apiVersion: v1
kind: ServiceAccount
metadata:
  name: caelus
  namespace: kube-system
---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRole
metadata:
  labels:
    kubernetes.io/bootstrapping: rbac-defaults
  name: system:caelus
rules:
  - apiGroups: [""]
    resources:
    - pods
    - nodes
    - nodes/status
    verbs: ["list", "watch", "get", "update", "delete"]
  - apiGroups: [""]
    resources: ["pods/eviction"]
    verbs: ["create"]
---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRoleBinding
metadata:
  annotations:
    rbac.authorization.kubernetes.io/autoupdate: "true"
  labels:
    kubernetes.io/bootstrapping: rbac-defaults
  name: system:caelus
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: system:caelus
subjects:
  - kind: ServiceAccount
    name: caelus
    namespace: kube-system
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: caelus-json
  namespace: kube-system
data:
  caelus.json: |
    {
      "k8s_config": {
        "kubelet_root_dir": "/data"
      },
      "check_point": {
        "check_point_dir": "/var/run/caelus",
        "node_resource_key": "node_resource"
      },
      "task_type": {
        "online_type": "local",
        "offline_type": "yarn_on_k8s"
      },
      "node_resource": {
        "disable": false,
        "disable_kill_if_normal": false,
        "update_interval": "10s",
        "yarn_config": {
          "capacity_inc_interval": "1m",
          "nm_server": "http://localhost:10010",
          "nm_reserve": {
            "mem_mb": 1024
          },
          "resource_roundoff": {
            "cpu_milli": 1000,
            "mem_mb": 512
          },
          "resource_range": {
            "cpu_milli": {
              "min": 1000,
              "max": 2000,
              "ratio": 0.1
            },
            "mem_mb": {
              "min": 512,
              "max": 1024,
              "ratio": 0.1
            }
          },
          "port_auto_detect": true,
          "properties": {},
          "disks": {
            "ratio_to_core": 50,
            "multi_disk_disable": false,
            "disk_min_capacity_gb": 500,
            "space_check_enabled": true,
            "space_check_period": "10m",
            "space_check_reserved_gb": 50,
            "space_check_reserved_percent": 0.2,
            "space_clean_disable": false,
            "space_clean_just_data": false,
            "offline_exited_clean_delay": "25m"
          },
          "cpu_over_commit": {
            "enable": true,
            "over_commit_percent": 1.5,
            "periods": [
              {
                "range": ["15:00","16:00"],
                "over_commit_percent": 1.6
              }
            ]
          }
        },
        "silence": {
          "periods": [],
          "ahead_of_unSchedule": "5m"
        }
      },
      "predicts": [{
        "disable": false,
        "predict_type": "local",
        "predict_server_addr": "",
        "reserve_resource": {
          "cpu_milli": 1000,
          "mem_mb": 5120,
          "cpu_percent": "20%",
          "mem_percent": "20%"
        }
      }],
      "metrics": {
        "node": {
          "collect_interval": "15s",
          "ifaces_xxx": ["xxx_normal"],
          "disk_names": ["vdb"],
          "system_processes": ["rcu_sched"]
        },
        "container": {
          "resources": [
            "cpu",
            "memory"
          ],
          "cgroups": [
            "/kubepods"
          ],
          "collect_interval": "15s",
          "max_housekeeping_interval": "1m"
        },
        "perf": {
          "disable": true,
          "collect_interval": "1m",
          "collect_duration": "1s",
          "ignored_cgroups": ["/kubepods/besteffort", "/kubepods/offline"]
        },
        "rdt": {
          "disable": true,
          "rdt_command": "",
          "collect_interval": "1m",
          "collect_duration": "2s",
          "execute_interval": "2s"
        },
        "prometheus": {
          "collect_interval":"5s",
          "disable_show": false,
          "items": [{
            "address":"http://xxx/metrics",
            "collect":["xx"],
            "no_collect":[]
          }]
        }
      },
      "resource_isolate": {
        "disable": false,
        "resource_disable": {"netio":true, "diskio":true},
        "update_period": "1m",
        "cpu_config": {
          "auto_detect": true,
          "manage_policy": "",
          "cpuset_config": {
            "enable_online_isolate": false,
            "reserved_cpus": ""
          },
          "cpu_quota_config": {
            "offline_share": 102
          }
        },
        "external_components": []
      },
      "alarm": {
        "enable": false,
        "ignore_alarm_when_silence": false,
        "cluster": "xxx",
        "message_batch": 1,
        "message_delay": "1m",
        "channel_name": "local",
        "alarm_channel": {
          "local": {
            "executor": "xxx"
          },
          "remote": {
            "remoteWebhook": "",
            "weWorkWebhook": "http://xxx"
          }
        }
      },
      "online": {
        "enable": false,
        "pid_to_cgroup": {
          "pids_check_interval": "0s",
          "cgroup_check_interval": "1m",
          "batch_num": 50
        },
        "jobs": [
          {
            "name": "xxx",
            "command": "xxx",
            "metrics": [
              {
                "name": "latency",
                "source": {
                  "check_interval": "1m",
                  "metrics_command": ["/xxx"],
                  "cmd_need_chroot": false,
                  "metrics_url": ""
                }
              }
            ]
          }
        ]
      },
      "disk_quota": {
        "enabled": false,
        "check_period": "3m",
        "container_runtime": "docker",
        "volume_sizes": {
          "rootFs": {
            "quota": 20480000000,
            "inodes": 10000000
          },
          "emptyDir": {},
          "hostPath": {}
        }
      }
    }
  rules.json: |
    {
      "disable": false,
      "rule_check": {
        "node_rules": [
          {
            "name": "cpu",
            "metrics": [
                "cpu_avg"
            ],
            "check_interval": "10s",
            "handle_interval": "10s",
            "recover_interval": "15s",
            "rules": [
              {
                "detects": [
                  {
                    "name": "expression",
                    "args": {
                      "expression": "auto",
                      "warning_count": 10,
                      "warning_duration": "10s"
                    }
                  }
                ],
                "actions": [
                  {
                    "name": "adjust",
                    "args": {
                      "resources": [
                        {
                          "step": "1000m"
                        }
                      ]
                    }
                  },
                  {
                    "name": "schedule",
                    "args": {}
                  }
                ]
              }
            ]
          },
          {
            "name": "memory",
            "metrics": [
                "memory_available"
            ],
            "check_interval": "10s",
            "handle_interval": "20s",
            "rules": [
              {
                "detects": [
                  {
                    "name": "expression",
                    "args": {
                      "expression": "auto",
                      "warning_count": 2
                    }
                  }
                ],
                "actions": [
                  {
                    "name": "adjust",
                    "args": {
                      "resources": [
                        {
                          "step": "1024000000"
                        }
                      ]
                    }
                  },
                  {
                    "name": "schedule",
                    "args": {}
                  }
                ]
              }
            ]
          },
          {
            "name": "diskio",
            "metrics": [
                "$dev_diskio_util",
                "$dev_diskio_write_kibps",
                "$dev_diskio_write_iops",
                "cpu_avg"
            ],
            "check_interval": "5s",
            "handle_interval": "10s",
            "recover_interval": "15s",
            "rules": [
              {
                "detects": [
                  {
                    "name": "expression",
                    "args": {
                      "expression": "$dev_diskio_write_kibps > 100*1024 || $dev_diskio_write_iops > 100 ",
                      "warning_count": 2
                    }
                  }
                ],
                "actions": [
                  {
                    "name": "adjust",
                    "args": {
                      "resources": [
                        {
                          "resource": "cpu",
                          "step_percent": 0.2
                        }
                      ]
                    }
                  },
                  {
                    "name": "schedule",
                    "args": {}
                  }
                ]
              }
            ],
            "recover_rules": [
              {
                "detects": [
                  {
                    "name": "expression",
                    "args": {
                      "expression": "cpu_avg > 0.3",
                      "warning_count": 2
                    }
                  }
                ],
                "actions": [
                  {
                    "name": "schedule",
                    "args": {}
                  }
                ]
              }
            ]
          }
        ],
        "container_rules": [
          {
            "metrics": [
                "nr_cpu_throttled",
            ],
            "check_interval": "5s",
            "handle_interval": "10s",
            "recover_interval": "15s",
            "rules": [
              {
                "detects": [
                  {
                    "name": "expression",
                    "args": {
                      "expression": "nr_cpu_throttled > 0"
                    }
                  }
                ]
              }
            ]
          }
        ],
        "app_rules": [
          {
            "name": "slo",
            "metrics": [
                "slo_min",
                "slo_max"
            ],
            "check_interval": "5s",
            "handle_interval": "10s",
            "recover_interval": "15s",
            "rules": [
              {
                "detects": [
                  {
                    "name": "expression",
                    "args": {
                      "expression": "slo_min < 0.1"
                    }
                  }
                ],
                "actions": [
                  {
                    "name": "schedule",
                    "args": {}
                  }
                ]
              },
              {
                "detects": [
                  {
                    "name": "expression",
                    "args": {
                      "expression": "slo_min < 0.05"
                    }
                  }
                ],
                "actions": [
                  {
                    "name": "adjust",
                    "args": {
                      "op": "loop",
                      "resources": [
                        {
                          "resource": "cpu",
                          "step": "1000m"
                        },
                        {
                          "resource": "memory",
                          "step": "1073741824"
                        }
                      ]
                    }
                  }
                ]
              }
            ],
            "recover_rules": [
              {
                "detects": [
                  {
                    "name": "expression",
                    "args": {
                      "expression": "slo_max < 0.2"
                    }
                  }
                ]
              }
            ]
          },
          {
            "name": "osd:latency",
            "metrics": [
                "value",
                "slo",
                "count"
            ],
            "check_interval": "5s",
            "handle_interval": "10s",
            "recover_interval": "15s",
            "rules": [
              {
                "detects": [
                  {
                    "name": "expression",
                    "args": {
                      "expression": "value > slo && count > 50",
                      "warning_count": 3
                    }
                  }
                ],
                "actions": [
                  {
                    "name": "schedule",
                    "args": {}
                  }
                ]
              }
            ],
            "recover_rules": [
              {
                "detects": [
                  {
                    "name": "expression",
                    "args": {
                      "expression": "value < 0.9 * slo",
                      "warning_count": 3
                    }
                  }
                ]
              }
            ]
          }
        ]
      },
      "notify_config": {
        "memory_cgroup": {
          "pressures": [
            {
              "cgroups": [
                  "/kubepods/offline"
              ],
              "pressure_level": "low",
              "duration": "30ms",
              "count": 2
            }
          ],
          "usages": [
            {
              "cgroups": [
                  "/kubepods/offline/test"
              ],
              "margin_mb": 2048,
              "duration": "1m"
            }
          ]
        }
      }
    }
---
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: caelus
  namespace: kube-system
  labels:
    app: caelus
spec:
  selector:
    matchLabels:
      app: caelus
  template:
    metadata:
      labels:
        app: caelus
      annotations:
        prometheus.io/scrape: 'true'
        prometheus.io/port: '10030'
    spec:
      hostNetwork: true
      hostPID: true
      tolerations:
      - effect: NoSchedule
        operator: Exists
      serviceAccountName: caelus
      containers:
      - name: caelus
        image: xxx/caelus:xxx
        imagePullPolicy: Always
        command: ["/caelus"]
        args:
        - --v=2
        - --logtostderr
        - --config=/etc/caelus/caelus.json
        - --hostname-override=$(MY_NODE_NAME)
        - --insecure-bind-address=$(MY_NODE_IP)
        - --docker=unix:///rootfs/var/run/docker.sock
        ports:
        - containerPort: 10030
          hostPort: 10030
        env:
        - name: MY_NODE_NAME
          valueFrom:
            fieldRef:
              fieldPath: spec.nodeName
        - name: MY_NODE_IP
          valueFrom:
            fieldRef:
              fieldPath: status.hostIP
        securityContext:
          capabilities:
            add:
              - SYS_ADMIN
              - NET_ADMIN
              - MKNOD
              - SYS_PTRACE
              - SYS_CHROOT
              - SYS_NICE # for set cpuset
#          privileged: true
        volumeMounts:
        - name: caelus-json
          mountPath: /etc/caelus
        # cadvisor volumes
        - name: rootfs
          mountPath: /rootfs
          mountPropagation: HostToContainer
          readOnly: true
        - name: var-run-caelus
          mountPath: /var/run/caelus
        - name: sys
          mountPath: /sys
          readOnly: true
        - name: disk
          mountPath: /dev/disk
          readOnly: true
        - name: etc
          mountPath: /etc
      volumes:
      - configMap:
          defaultMode: 420
          name: caelus-json
        name: caelus-json
      # cadvisor volumes
      - name: rootfs
        hostPath:
          path: /
      - name: var-run-caelus
        hostPath:
          path: /var/run/caelus
          type: DirectoryOrCreate
      - name: sys
        hostPath:
          path: /sys
      - name: etc
        hostPath:
          path: /etc
      - name: disk
        hostPath:
          path: /dev/disk
